#!/usr/bin/env python
import argparse
import subprocess
import os
import re
import sys
import json

NAME = "aquifer"

def build():
    print("Work in Progress: Print list of all files to build")
    p1 = subprocess.Popen(["make", "-Bn"], stdout=subprocess.PIPE)
    out = p1.communicate()[0]

    f = open(os.path.dirname(__file__) + "/raw_out.txt", "w")
    f.write(out)
    f.close()

    dict = {}
    cntGood = 0
    cntBad = 0
    for line in out.splitlines():
        if line[:2] == "cc":
            #relevant commands
            rx = ' -o.+[.]c'
            p = re.compile(rx)
            m = p.search(line)

            if m:
                filename = m.group(0).split(" ")[-1:][0]
                if not filename in dict:
                    dict[filename] = {}
                else:
                    print "DUPLICATE FOR    ", filename

                # print filename
                cntGood+=1
            else:
                sys.stderr.write("---NO OUTPUT\n")
                cntBad+=1
    
    outjson = json.dumps(dict, indent=4)
    f = open(os.path.dirname(__file__) + "/database.json", "w")
    f.write(outjson)
    f.close()
    print
    print "Files to run: " + str(cntGood)
    print "Problematic commands: " + str(cntBad)
    

def print_file(file):
    print("print is not yet implemented")

def render():
    print("render is not yet implemented")


def main():
    description = NAME + " tool: helping developers get build information for cource files they want to test."

    parser = argparse.ArgumentParser(description=description)

    parser.add_argument("command", nargs=1, default = "", help="run command for {}. Available command: build, print <SRC_FILE>, render".format(NAME))
    parser.add_argument("argument", nargs="?", default = "", help="<SRC_FILE> argument for the print command")
    arguments = parser.parse_args()

    valid_commands = ["build", "print", "render"]
    cmd = arguments.command[0]
    arg = arguments.argument

    if not cmd in valid_commands:
        print("Please input a valid command: " + str(valid_commands))

    if cmd == "print" and arg == "" :
        print("Please add the file to print build information for: print <SRC_FILE>. Exiting.")
        return
    
    if cmd != "print" and arg != "" :
        print("Too many arguments. Exiting.")
        return

    if cmd == "build":
        build()

    if cmd == "print":
        print_file(arg)

    if cmd == "render":
        render()




if __name__== "__main__":
    main()