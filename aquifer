#!/usr/bin/env python3
"""
aquifer tool:  helping developers get build information for source files they want to test.
"""

import argparse
import os
import json
import logging
import sys
import subprocess
import re
import tempfile
from dataclasses import dataclass

LOG_FILE = os.path.join(os.path.dirname(__file__), "aquifer.log")
TOOL_NAME = "aquifer"
TOOL_PATH = os.path.dirname(__file__)
COMPILE_CMD_NAME = "compile_commands.json"

PROJECT_NAME = os.path.basename(os.getcwd())
OUT_JSON_NAME = "internal_rep.json"
OUT_MF_NAME = "Makefile.aquifer"

FROM_RUN = False

JSON_INFO = "root"
JSON_FILE = "files"
JSON_NAME = "name"
JSON_INC = "includes"
JSON_DEF = "defines"
JSON_FCT = "functions"

CC_INCLUDE = "-I"
CC_DEFINE = "-D"

MAKE_ROOT = "SRCDIR"
MAKE_ROOT_PATH = ""
MAKE_PROOFS = "HELPERDIR"
MAKE_PROOFS_PATH = ""

def build(args):
    """ Generate a json build database from given compile commands.
    If not compile commands path given, generate compile commands.
    No return"""

    comp_cmds_path = args.compile_commands
    json_path = args.json_path
    # Load the generated compilation commands, if possible
    if not os.path.exists(comp_cmds_path):
        logging.error("Specified path does not point to an existing file: %s", comp_cmds_path)
        sys.exit(1)

    # get compilation commands
    internal_rep_path = OUT_JSON_NAME
    comp_cmds = None
    with open(comp_cmds_path, "r") as handle:
        comp_cmds = json.load(handle)

    # Extract relevant information
    internal_rep = {}
    internal_rep[JSON_INFO] = os.path.abspath(args.root_dir)
    internal_rep[JSON_FILE] = {}
    cflow_cmd = ["cflow"]

    for comp_cmd in comp_cmds:
        internal_file = {}
        file_path = str(comp_cmd['file'])

        file_name = os.path.basename(file_path)
        internal_file[JSON_NAME] = file_name

        # COMPILE COMMAND
        command_split = comp_cmd['command'].split()
        command_include_dirs = []
        command_defines = []
        for cmd_tup in enumerate(command_split):
            cmd_ind = cmd_tup[0]
            next_arg = "" if cmd_ind == len(command_split)-1 else command_split[cmd_ind+1]
            include = get_flag_arg(CC_INCLUDE, command_split[cmd_ind], next_arg)
            if include:
                command_include_dirs.append(get_abspath(include, comp_cmds_path))
            # include = get_flag_arg("-isystem", command_split[cmd_ind], next_arg)
            # if include:
            #     command_include_dirs.append(include)
            define = get_flag_arg(CC_DEFINE, command_split[cmd_ind], next_arg)
            if define:
                command_defines.append(define)

        # fill in internal representation
        internal_file[JSON_INC] = command_include_dirs
        internal_file[JSON_DEF] = command_defines
        internal_file[JSON_FCT] = {}

        # collect makefile information
        if file_path in internal_rep[JSON_FILE]:
            logging.warning("Clashing file name: %s", file_path)
        else:
            internal_rep[JSON_FILE][file_path] = internal_file

    # HANDLING DEPENDENCIES
    # get all header and source files in the project,
    # add to cflow command
    h_and_c_files = find_h_and_c(args.root_dir)
    cflow_cmd.extend(h_and_c_files)

    # run CFLOW, and output to file
    temp_file = tempfile.NamedTemporaryFile(delete=False)
    tf_path = temp_file.name
    temp_file.close()

    cflow_cmd.extend(["-A", "--no-main", "-o"+tf_path, "--brief"])
    proc = subprocess.Popen(cflow_cmd, stderr=subprocess.PIPE)
    for cflow_msg in proc.stderr:
        logging.warning("cflow stderr > %s", cflow_msg)

    # parse CFLOW output
    parse_cflow(internal_rep, tf_path)

    # Write internal representation to files
    if json_path:
        write_internal_representation(internal_rep, json_path)
    else:
        write_internal_representation(internal_rep, internal_rep_path)


def get_abspath(include, cc_path):
    """transform included path to an absolute path """
    if os.path.isabs(include) and os.path.exists(include):
        return include
    path = os.path.join(os.path.dirname(cc_path), include)
    if os.path.exists(path):
        return os.path.abspath(path)

    logging.error("include path not found at %s", path)
    sys.exit(1)


def parse_cflow(rep, tf_path):
    """parse cflow output file. integrate it into json internal representation"""

    current_at_level = []
    with open(tf_path, "r") as cflow_out:
        for cur_line in cflow_out:
            # get depth of current line
            leading_spaces = len(cur_line) - len(cur_line.lstrip(" "))
            cur_depth = leading_spaces // 4
            if leading_spaces % 4:
                logging.warning("Line has %d leading spaces: %s", leading_spaces, cur_line[:-1])

            #add function to internal rep
            regex = (r"(?P<fct>\w+)\(\)"
                     r"( <.+ at (?P<file>.+):\d+>"
                     r"( (?P<rec>\(R\)))?:)?"
                     r"( \[see (?P<ref>\d+)\])?")
            match = re.match(regex, cur_line.strip())
            if not match:
                logging.warning("Regex did not match for \"%s\"", cur_line[:-1])
                continue

            cf_func = match["fct"]
            cf_file = match["file"]
            cf_ref = match["ref"]
            if cf_file and not cf_ref:
                if cf_file in rep[JSON_FILE]:
                    if cf_func in rep[JSON_FILE][cf_file][JSON_FCT]:
                        logging.warning("duplicate entry for %s in %s", cf_func,
                                        cf_file)
                    rep[JSON_FILE][cf_file][JSON_FCT][cf_func] = {}
                else:
                    if cf_file.endswith(".c"):
                        logging.info("source file <%s> not found"
                                     " in internal representation. Adding.", cf_file)
                    elif cf_file.endswith(".h"):
                        logging.debug("Header <%s> not found "
                                      "in internal representation. Adding.", cf_file)
                    else:
                        logging.error("<%s> not found in internal representation. Adding.", cf_file)
                        sys.exit(1)
                    add_to_int_rep(cf_file, cf_func, rep)

            #handle function callings
            cur_node = (cf_func, cf_file)

            if cur_depth < len(current_at_level) - 1:
                current_at_level = current_at_level[:cur_depth + 1]
                current_at_level[cur_depth] = cur_node
            elif cur_depth == len(current_at_level) - 1:
                current_at_level[cur_depth] = cur_node
            elif cur_depth == len(current_at_level):
                current_at_level.append(cur_node)
            elif cur_depth > len(current_at_level):
                logging.error("jump in depth at line NOT AVAILABLE")
                sys.exit(1)

            if cur_depth != 0:
                #add to 1 depth less
                parent_depth = cur_depth - 1
                parent_func = current_at_level[parent_depth][0]
                parent_file = current_at_level[parent_depth][1]
                if not parent_file in rep[JSON_FILE]:
                    logging.error("Parent file %s of calling function %s of "
                                  "called function %s is not found in internal rep.",
                                  parent_file, parent_func, cf_func)
                    sys.exit(1)
                else:
                    rep[JSON_FILE][parent_file][JSON_FCT]\
                        [parent_func][cf_func] = cf_file


def find_h_and_c(root_dir):
    """From the project root, return a list of all header and source files in the project"""
    all_h_and_c = []
    for root, _, files in os.walk(root_dir):
        for file in files:
            if file.endswith(".h") or file.endswith(".c"):
                f_path = os.path.abspath(os.path.join(root, file))
                all_h_and_c.append(f_path)
    return all_h_and_c


def add_to_int_rep(cf_file, cf_func, rep):
    """add a file to the internal json representation adequately"""
    f_info = {
        JSON_NAME: os.path.basename(cf_file),
        JSON_INC: [],
        JSON_DEF: [],
        JSON_FCT: {cf_func:{}},
    }
    rep[JSON_FILE][cf_file] = f_info


def write_internal_representation(rep, path):
    """ output a file continaing the json internal representation used in the tool """
    outjson = json.dumps(rep, indent=4)
    with open(path, "w") as handle:
        print(outjson, file=handle)
    if not FROM_RUN:
        print("-- Saved the internal representation at: {}".format(os.path.abspath(path)))


def get_flag_arg(flag, arg, next_arg):
    """ if string corresponds to correct flag, return corresponding argument. """
    if arg.startswith(flag):
        if len(arg) == len(flag):
            return next_arg
        if len(arg) > len(flag):
            return arg[len(flag):]
    else:
        return None


def makefile(args):
    """ Output a makefile containing relevant information for
    an input harness. No return. """

    # HARNESS
    harness_path = find_harness_file(args.harness)

    # SAVE PATH
    save_path = os.path.join(os.path.dirname(harness_path), OUT_MF_NAME)
    if args.save_path:
        save_path = args.save_path

    # JSON INPUT
    json_path = args.json_path
    if not os.path.exists(json_path):
        logging.error("Specified path does not point to an existing .json file: %s", json_path)
        sys.exit(1)

    with open(json_path, "r") as json_file:
        int_rep = json.load(json_file)

    handle_global_args(args, int_rep[JSON_INFO])
    # handle_project_flag(args)

    if not os.path.exists(harness_path):
        logging.error("Specified path does not point to an existing file: %s", harness_path)
        sys.exit(1)

    makefile_list = build_makefile(args, int_rep, harness_path)

    # Write to output file
    with open(save_path, "w") as output:
        print("\n".join(makefile_list), file=output)
    print("-- Created aquifer Makefile at {}".format(os.path.abspath(save_path)))


def find_harness_file(path):
    """ find harness file in current directory. Return its path """
    harness_path = ""
    # if harness path is given
    if path:
        harness_path = os.path.abspath(path)
        if not os.path.exists(harness_path):
            logging.error("Specified path does not point to an existing file: %s", harness_path)
            sys.exit(1)
        return harness_path

    # look for harness in cwd
    found_harness = False
    for file in os.listdir("."):
        if file.endswith("_harness.c"):
            if found_harness:
                logging.error("too many harness files in current directory!!")
                sys.exit(1)
            harness_path = os.path.abspath(file)
            found_harness = True

    if not found_harness:
        logging.error("no harness found in current directory!!")
        sys.exit(1)

    return harness_path


def handle_project_flag(args):
    """ handle comand line flags that modify global variables"""
    if args.project == "freertos":
        args.define_name = "CFLAGS"
        args.dependency_name = "OBJS"
        args.dependency_extension = "goto"
        args.makefile_common_path = "../../Makefile.common"

    global MAKE_ROOT
    global MAKE_ROOT_PATH
    global MAKE_PROOFS
    global MAKE_PROOFS_PATH

    MAKE_ROOT_PATH = root_path
    if args.make_source_path:
        MAKE_ROOT_PATH = os.path.abspath(os.path.join(os.getcwd(), args.make_source_path))
    MAKE_PROOFS_PATH = os.path.abspath(os.path.join(MAKE_ROOT_PATH, "tests/cbmc"))

    if args.project == "freertos":
        MAKE_ENTRY[1] = len("_harness")
        MAKE_DEFINE = "CFLAGS"
        MAKE_DEPENDENCIES = "OBJS"
        MAKE_DEPENDENCY_EXTENSION = "goto"
        MAKE_COMMON_PATH = "../../Makefile.common"
        MAKE_ROOT = "FREERTOS"
        MAKE_PROOFS = "PROOFS"
        MAKE_PROOFS_PATH = os.path.abspath(os.path.join(MAKE_ROOT_PATH, "tools/cbmc/proofs"))

    if args.entry_name:
        MAKE_ENTRY[0] = args.define_name
    if args.define_name:
        MAKE_DEFINE = args.define_name
    if args.include_name:
        MAKE_INCLUDE = args.include_name
    if args.dependency_name:
        MAKE_DEPENDENCIES = args.dependency_name
    if args.dependency_extension:
        MAKE_DEPENDENCY_EXTENSION = args.dependency_extension
    if args.makefile_common_path:
        MAKE_COMMON_PATH = args.makefile_common_path
    if args.make_source_name:
        MAKE_ROOT = args.make_source_name
    if args.make_proofs_name:
        MAKE_PROOFS = args.make_proofs_name

    proofs_path = args.make_proofs_path
    if proofs_path:
        if os.path.isabs(args.proofs_path) and os.path.exists(proofs_path):
            MAKE_PROOFS_PATH = proofs_path
        elif os.path.exists(os.path.join(root_path, proofs_path)):
            MAKE_PROOFS_PATH = os.path.abspath(os.path.join(root_path, proofs_path))
        elif os.path.exists(proofs_path):
            MAKE_PROOFS_PATH = os.path.abspath(proofs_path)
        else:
            logging.error("Specified proofs directory is incorrect: %s", proofs_path)


@dataclass
class MakefileInfo:
    """ class that contains all the iunfo needed to create a makefile for a given harness """
    includes = set()
    defines = set()
    dependencies = set()
    func_calls = {} # not currently used, but this may be useful going forward


def build_makefile(args, rep, h_path):
    """ build the makefile """
    if h_path not in rep[JSON_FILE]:
        logging.error("<%s> not found in given internal representation. "
                      "Try rebuilding the internal rep.", h_path)
        sys.exit(1)

    out_lines = []
    out_lines.append("# This file is generated automatically by Aquifer")
    out_lines.append("")

    out_lines.append(MAKE_ROOT + " = " + MAKE_ROOT_PATH)
    out_lines.append(MAKE_PROOFS + " = " + MAKE_PROOFS_PATH)
    out_lines.append("")

    entry_name, _ = os.path.splitext(os.path.basename(h_path))

    out_lines.append("")

    entry_name, _ = os.path.splitext(os.path.basename(h_path))
    if MAKE_ENTRY[1]:
        entry_name = entry_name[:-MAKE_ENTRY[1]]
    out_lines.append(MAKE_ENTRY[0] + " = " + entry_name)
    # out_lines.append("%s = %s" % (args.entry_name, entry_name))
    out_lines.append("")

    harness_info = MakefileInfo
    h_fcts = rep[JSON_FILE][h_path][JSON_FCT].keys()
    get_recursive_info(args, rep, harness_info, h_path, h_fcts)
    
    harness_ordered = adjust_info(harness_info)
    
    out_lines.extend(makefile_content(args, harness_info))
    out_lines.append("include %s" %(args.makefile_common_path))
    return out_lines


def get_recursive_info(args, rep, info, cur_path, relevant_fcts):
    """ recursively look for interesting information related to Makefile generation """
    # TODO currently this would be problematic for recursive functions
    cur_json = rep[JSON_FILE][cur_path]
    info.includes.update(set(cur_json[JSON_INC]))
    info.defines.update(set(cur_json[JSON_DEF]))
    file_to_funcs = {}
    for fct in relevant_fcts:
        for called_fct, called_file in cur_json[JSON_FCT][fct].items():
            if called_file:
                called_file_ext = called_file
                if args.dependency_extension:
                    called_file_ext = change_extension(called_file, args.dependency_extension)
                info.dependencies.add(called_file_ext)

                if called_file in file_to_funcs:
                    file_to_funcs[called_file].append(called_fct)
                else:
                    file_to_funcs[called_file] = [called_fct]

                if called_file in info.func_calls:
                    info.func_calls[called_file_ext].append(called_fct)
                else:
                    info.func_calls[called_file_ext] = [called_fct]
    for f_path, f_funcs in file_to_funcs.items():
        get_recursive_info(args, rep, info, f_path, f_funcs)


def adjust_info(info):
    """ add Makefile shortcuts to paths in MakefileInfo """
    ordered_info = MakefileOrderedinfo
    ordered_info.includes = shortcut_path(info.includes, CC_INCLUDE)
    ordered_info.defines = add_prefix(info.defines, CC_DEFINE)
    ordered_info.dependencies = shortcut_path(info.dependencies, "")

    return ordered_info


def shortcut_path(paths, prefix):
    """ replace project root and proofs root path with Makefile variable """
    new_paths = []
    for path in paths:
        new_path = path
        if os.path.commonprefix([path, MAKE_PROOFS_PATH]) == MAKE_PROOFS_PATH:
            if path == MAKE_PROOFS_PATH:
                new_path = make_val(MAKE_PROOFS)
            else:
                rel_path = os.path.relpath(path, MAKE_PROOFS_PATH)
                new_path = os.path.join(make_val(MAKE_PROOFS), rel_path)
        elif os.path.commonprefix([path, MAKE_ROOT_PATH]) == MAKE_ROOT_PATH:
            if path == MAKE_ROOT_PATH:
                new_path = make_val(MAKE_ROOT)
            else:
                rel_path = os.path.relpath(path, MAKE_ROOT_PATH)
                new_path = os.path.join(make_val(MAKE_ROOT), rel_path)

        new_paths.append(prefix + new_path)

    return sorted(new_paths)


def add_prefix(items, prefix):
    """ add prefix flag to input items. Return list """
    new_items = []
    for item in items:
        new_items.append(prefix + item)

    return sorted(new_items)


def make_val(var):
    """ return MAKE syntax for accessing a variable value """
    return "$(" + str(var) + ")"


@dataclass
class MakefileOrderedinfo:
    """ class that contains all the iunfo needed to create a makefile for a given harness """
    includes = []
    defines = []
    dependencies = []


def makefile_content(args, info):
    """ return a list of strings that contain Makefile content for a given file """
    mf_lines = []
    mf_lines.extend(add_to_makefile(info.includes, args.include_name))
    mf_lines.extend(add_to_makefile(info.defines, args.define_name))
    mf_lines.extend(add_to_makefile(info.dependencies, args.dependency_name))

    return mf_lines


def add_to_makefile(elements, label):
    """ return a list of Makefile commands associtaed to a specific variable """
    lines = [add_to_var(label, e) for e in elements]
    lines.append("")
    return lines


def add_to_var(var, term):
    """ return correct MAKE syntax for adding a value to a variable. """
    return "%s += %s" % (var, term)


def change_extension(path, ext):
    """change the extension of a file given it's path"""
    name, _ = os.path.splitext(path)
    return "%s.%s" % (name, ext)


def run(args):
    """ build internal represenation and create a Makefil for a given harness """

    # tempfile for storing json int_rep
    temp_file = tempfile.NamedTemporaryFile()
    args.json_path = temp_file.name
    global FROM_RUN
    FROM_RUN = True

    build(args)
    makefile(args)

    temp_file.close()


def parse_args():
    """parse arguments"""
    parser = argparse.ArgumentParser(description=__doc__)
    subparser = parser.add_subparsers(help="Available commands for {}".format(TOOL_NAME))

    # build command
    # default = called from project root
    parser_run_build = argparse.ArgumentParser(add_help=False)
    parser_run_build.add_argument("-cc", "--compile-commands", required=True,
                                  help="path to compile_commands json file.")

    parser_build = subparser.add_parser('build', parents=[parser_run_build],
                                        help="Generate a JSON build database \
        for the current project. Assumed cwd = roject root.")
    parser_build.add_argument("-r", "--root-dir", default=os.getcwd(),
                              help="root directory for the project under test")
    parser_build.add_argument("-jp", "--json_path", default=OUT_JSON_NAME,
                              help="output location for a file containing a json internal \
        representation of the stored information.")
    parser_build.set_defaults(func=build)

    # makefile command
    # default = called from harness directory
    parser_run_make = argparse.ArgumentParser(add_help=False)
    parser_run_make.add_argument("-ha", "--harness",
                                 help="path to harness for which we create a makefile.")
    parser_run_make.add_argument("-sp", "--save-path",
                             help="file path where the output Makefile will be saved")
    parser_run_make.add_argument("-p", "--project", choices=['s2n', 'freertos'],
                             help="predefine configurartion for a given project")
    parser_run_make.add_argument("-ent", "--entry_name", default="ENTRY",
                             help="label for entry used in the Makefile")
    parser_run_make.add_argument("-def", "--define_name", default="DEFINES",
                             help="label for defines used in the Makefile")
    parser_run_make.add_argument("-inc", "--include_name", default="INC",
                             help="label for includes used in the Makefile")
    parser_run_make.add_argument("-dep", "--dependency_name", default="DEPENDENCIES",
                             help="label for dependencies used in the Makefile")
    parser_run_make.add_argument("-dx", "--dependency_extension",
                             help="alternate extension for dependecies")
    parser_run_make.add_argument("-mc", "--makefile-common-path", default="../Makefile.common",
                             help="path to Makefile.common")

    parser_run_make.add_argument("-msn", "--make-source-name",
                                 help="Makefile variable name for source directory")
    parser_run_make.add_argument("-msp", "--make-source-path",
                                 help="path mskefile real source directory")
    parser_run_make.add_argument("-mpn", "--make-proofs-name",
                                 help="Makefile variable name for proofs directory")
    parser_run_make.add_argument("-mpp", "--make-proofs-path",
                                 help="path makefile proofs directory")

    parser_make = subparser.add_parser('makefile', parents=[parser_run_make],
                                       help="Create a makefile \
        from the internal representation for a given harness. Assumed cwd = harness directory.")
    parser_make.add_argument("-jp", "--json-path", required=True,
                             help="file path to JSON internal representation")
    parser_make.set_defaults(func=makefile)

    # run command
    # default = called from harness directory
    parser_run = subparser.add_parser('run', parents=[parser_run_build, parser_run_make],
                                      help="Generate a Makefile from scratch \
        for a given harness. Assumed cwd = harness directory.")
    parser_run.add_argument("-r", "--root-dir", required=True,
                            help="root directory for the project under test")
    parser_run.set_defaults(func=run)

    # parse
    return parser.parse_args()


def main():
    """ Main function """

    logging.basicConfig(filename=LOG_FILE,
                        level=logging.DEBUG)

    arguments = parse_args()
    arguments.func(arguments)


if __name__ == "__main__":
    main()
