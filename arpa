#!/usr/bin/env python3
#   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License").
#   You may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

'''
Main module for the ...
arpa tool:  helping developers get build information for source files they want to test.
'''

import os
import logging
import sys
import lib.arpa_helper as helper
import lib.arpa_build as arpa_build
import lib.arpa_makefile as arpa_makefile


class ArpaInstance:
    ''' Class that captures all the details of a Arpa command run '''

    def __init__(self):
        self.args = None
        self.compilation_commands = None
        self.cflow_instance = arpa_build.CflowInstance()
        self.internal_rep = None
        self.command_to_run = None


    def __adjust_fields(self):
        self.compilation_commands = arpa_build.CompileCommands(self.args.compile_commands)
        self.internal_rep = arpa_build.InternalRepresentation(os.path.abspath(self.args.root_dir))
        self.command_to_run = None


    def parse_args(self):
        '''parse arguments'''
        self.args = helper.ParserInstance(self).parse_arguments()
        self.__adjust_fields()

    @classmethod
    def prepare_log(cls):
        ''' Set up logging for this command run '''
        # log_file = os.path.join(self.args.root_dir, "arpa.log")
        # Below is to make debugging simpler
        log_file = os.path.join(os.path.dirname(__file__), helper.TOOL_NAME + ".log")
        if os.path.isfile(log_file):
            os.remove(log_file)
        logging.basicConfig(filename=log_file, level=logging.DEBUG)


    def build_internal_rep(self):
        ''' Generate a json build database from given compile commands.
        If not compile commands path given, generate compile commands.
        No return'''

        self.compilation_commands.create_file_2_command_map()
        for file in self.compilation_commands.file_2_command:
            self.internal_rep.add_file_entry(file)
            self.internal_rep.add_includes(file, self.compilation_commands.get_includes(file))
            self.internal_rep.add_defines(file, self.compilation_commands.get_defines(file))

        self.cflow_instance.init_command(self.args.root_dir)
        self.cflow_instance.run_command()
        self.cflow_instance.parse_output()

        self.internal_rep.add_dependencies(self.cflow_instance.file_2_dependencies)
        self.internal_rep.validate()


    def run_command(self):
        ''' run the specified command '''
        self.args.func()

    def call_build(self):
        ''' implementation of the <arpa build> command:
        saves the internal representation to a file. '''
        # saves the internal representation to a file
        self.internal_rep.write_to_file(self.args.json_path)
        print("-- Saved the internal representation at: \
              {}".format(os.path.abspath(self.args.json_path)))


    def call_run(self):
        ''' implementation of the <arpa run> command:
        outputs a proof-specific makefile. '''

        makefile = arpa_makefile.Makefile(self.args)
        makefile.directory.set_harness_path(self.args.file_under_test)

        if self.args.save_path:
            makefile.set_save_path(self.args.save_path)
        else:
            makefile.set_save_path(os.path.join(makefile.directory.path, helper.OUT_MF_NAME))

        self.__handle_args(self.internal_rep.representation[helper.JSON_INFO])

        makefile.build(self.internal_rep.representation)
        makefile.save()


    def __handle_args(self, root_path):
        args = self.args
        # store root path
        if args.make_root_path:
            args.make_root_path = os.path.abspath(os.path.join(os.getcwd(), args.make_source_path))
        else:
            args.make_root_path = root_path

        # handle proofs path
        args.make_proof_source_path = self.__handle_path(args.make_proof_source_path)
        args.make_proof_stub_path = self.__handle_path(args.make_proof_stub_path)


    def __handle_path(self, path_ut):
        joined_path_ut = os.path.join(self.args.make_root_path, path_ut)
        if path_ut:
            if os.path.isabs(path_ut) and os.path.exists(path_ut):
                return path_ut
            if os.path.exists(joined_path_ut):
                return os.path.abspath(joined_path_ut)
            if os.path.exists(path_ut):
                return os.path.abspath(path_ut)

        logging.error("Specified proofs directory is incorrect: %s", path_ut)
        sys.exit(1)


def main():
    ''' Main function '''
    arpa_instance = ArpaInstance()
    arpa_instance.parse_args()
    arpa_instance.prepare_log()
    arpa_instance.build_internal_rep()
    arpa_instance.run_command()


if __name__ == "__main__":
    main()
